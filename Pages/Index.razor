@page "/"
@using WASM_PWA.Crashtest.Infrastructure.Tools

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<select style="width: 400px" @onchange="@SelectTool">
    <option>Select tool</option>
    @for (int i = 0; i < Tools.Count; i++)
   {
       <option value="@i">@Tools[i].Description()</option>
   }
</select>

<p>@($"{(SelectedTool is null ? "Tool is not selected" : $"Selected tool is: {SelectedTool.Description()}")}")</p>

<button @onclick="@(() => Tools.Add(new SpecialTool(0101, "UPOR")))">Add Special Tool</button>

@code{
    public Tool SelectedTool { get; set; }

    public List<Tool> Tools { get; set; } = new();

    #region Tools
    public List<TurningExternalTool> TurningExternalTools
    {
        get
        {
            List<TurningExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningExternalTool))
            {
                result.Add(item as TurningExternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is TurningExternalTool);
            Tools.AddRange(value);
        }
    }

    public List<GroovingExternalTool> GroovingExternalTools
    {
        get
        {
            List<GroovingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingExternalTool))
            {
                result.Add(item as GroovingExternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is GroovingExternalTool);
            Tools.AddRange(value);
        }
    }

    public List<GroovingInternalTool> GroovingInternalTools
    {
        get
        {
            List<GroovingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingInternalTool))
            {
                result.Add(item as GroovingInternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is GroovingInternalTool);
            Tools.AddRange(value);
        }
    }

    public List<ThreadingExternalTool> ThreadingExternalTools
    {
        get
        {
            List<ThreadingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingExternalTool))
            {
                result.Add(item as ThreadingExternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is ThreadingExternalTool);
            Tools.AddRange(value);
        }
    }

    public List<ThreadingInternalTool> ThreadingInternalTools
    {
        get
        {
            List<ThreadingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingInternalTool))
            {
                result.Add(item as ThreadingInternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is ThreadingInternalTool);
            Tools.AddRange(value);
        }
    }



    public List<DrillingTool> DrillingTools
    {
        get
        {
            List<DrillingTool> result = new();
            foreach (var item in Tools.Where(x => x is DrillingTool))
            {
                result.Add(item as DrillingTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is DrillingTool);
            Tools.AddRange(value);
        }
    }

    public List<TappingTool> TappingTools
    {
        get
        {
            List<TappingTool> result = new();
            foreach (var item in Tools.Where(x => x is TappingTool))
            {
                result.Add(item as TappingTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is TappingTool);
            Tools.AddRange(value);
        }
    }

    public List<SpecialTool> SpecialTools
    {
        get
        {
            List<SpecialTool> result = new();
            foreach (var item in Tools.Where(x => x is SpecialTool))
            {
                result.Add(item as SpecialTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is SpecialTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    void SelectTool(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int index))
        {
            SelectedTool = Tools[index];
        }
        else
        {
            SelectedTool = null;
        }

    }

}
